{"version":3,"sources":["layout/components/content/master-page-title/index.jsx","view/pages/MastersDashboard/Locations/addLocations.jsx","view/pages/MastersDashboard/Locations/index.jsx"],"names":["MasterPageTitle","props","history","useHistory","pageTitle","pageText","addModelTile","goBack","setIsModalVisible","span","className","to","onClick","size","type","block","icon","isMobile","Input","TextArea","AddLocation","handleCancel","isModalVisible","showModal","useForm","handleSubmit","errors","useState","setDesc","title","setTitle","Date","setEndPicker","setStartPicker","value","label","setValue","handleResetInputValues","FooterAddOrUpdate","handleAddEvent","FooterCancelOrDelete","ghost","modalTitle","visible","onCancel","footer","justify","centered","closeIcon","width","layout","onSubmit","Item","id","name","style","placeholder","onChange","e","target","Locations","Option","Select","pagination","filters","sorter","extra","console","log","gutter","prefix","set","showSearch","optionFilterProp","onFocus","onBlur","onSearch","val","filterOption","input","option","children","toLowerCase","indexOf","columns","dataIndex","text","filterMode","filterSearch","onFilter","record","includes","a","b","age","address","startsWith","dataSource","key","scroll","x","total","showTotal"],"mappings":"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","file":"static/js/101.578e55e4.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { Card, Col, Row, Button } from \"antd\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nimport { RiAddCircleFill, RiArrowLeftCircleFill } from \"react-icons/ri\";\nimport { isMobile } from \"react-device-detect\";\n\nexport default function MasterPageTitle(props) {\n  let history = useHistory();\n  const { pageTitle, pageText, addModelTile, goBack, setIsModalVisible } =\n    props;\n\n  return (\n    <Col span={24}>\n      <Card className=\"hp-m-0\">\n        <Row>\n          <Col span={18}>\n            {goBack && (\n              <Link\n                to=\"#\"\n                onClick={() => history.goBack()}\n                className=\"action-icon text-primary  hp-mr-12 hp-d-inline-block\"\n              >\n                <RiArrowLeftCircleFill className=\"remix-icon\" size={24} />\n              </Link>\n            )}\n            <Row className=\"hp-d-inline-block\">\n              <Col span={24}>\n                {pageTitle && <h2 className=\"hp-m-0\">{pageTitle}</h2>}\n              </Col>\n\n              <Col span={24}>\n                {pageText && <p className=\"hp-mb-0 hp-p1-body\">{pageText}</p>}\n              </Col>\n            </Row>\n          </Col>\n          <Col span={6}>\n            {addModelTile && (\n              <Button\n                className=\"hp-float-right\"\n                type=\"primary\"\n                onClick={() => setIsModalVisible(true)}\n                block\n                icon={<RiAddCircleFill className=\"remix-icon\" size={22} />}\n              >\n                {!isMobile && addModelTile}\n              </Button>\n            )}\n          </Col>\n        </Row>\n      </Card>\n    </Col>\n  );\n}\n","import { Fragment, useState } from \"react\";\r\n\r\nimport Select, { components } from \"react-select\";\r\nimport \"flatpickr/dist/themes/light.css\";\r\nimport Flatpickr from \"react-flatpickr\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { RiCloseFill } from \"react-icons/ri\";\r\nimport { Button, Input, Form, Modal, Badge, Row, Col } from \"antd\";\r\n\r\nexport const isObjEmpty = (obj) => Object.keys(obj).length === 0;\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst AddLocation = (props) => {\r\n  const {\r\n    // store,\r\n    // dispatch,\r\n    // addEvent,\r\n    // selectEvent,\r\n    // updateEvent,\r\n    // removeEvent,\r\n    // calendarApi,\r\n    // refetchEvents,\r\n    handleCancel,\r\n    isModalVisible,\r\n    setIsModalVisible,\r\n    showModal,\r\n  } = props;\r\n\r\n  // const selectedEvent = store.selectedEvent;\r\n  const { errors, handleSubmit } = useForm();\r\n\r\n  const [desc, setDesc] = useState(\"\");\r\n  const [title, setTitle] = useState(\"\");\r\n  const [allDay, setAllDay] = useState(false);\r\n  const [endPicker, setEndPicker] = useState(new Date());\r\n  const [startPicker, setStartPicker] = useState(new Date());\r\n  const [value, setValue] = useState([{ value: \"Travel\", label: \"Travel\" }]);\r\n\r\n  const options = [\r\n    { value: \"Travel\", label: \"Travel\", badge: \"#C903FF\" },\r\n    { value: \"Social\", label: \"Social\", badge: \"#00F7BF\" },\r\n    { value: \"Work\", label: \"Work\", badge: \"#FFC700\" },\r\n    { value: \"Important\", label: \"Important\", badge: \"#FF0022\" },\r\n  ];\r\n\r\n  const OptionComponent = ({ data, ...props }) => {\r\n    return (\r\n      <components.Option {...props}>\r\n        <Badge color={data.badge} />\r\n        {data.label}\r\n      </components.Option>\r\n    );\r\n  };\r\n\r\n  // Adds New Event\r\n  // const handleAddEvent = () => {\r\n  //   const obj = {\r\n  //     title,\r\n  //     start: startPicker,\r\n  //     end: endPicker,\r\n  //     allDay,\r\n  //     display: \"block\",\r\n  //     extendedProps: {\r\n  //       calendar: value[0].label,\r\n  //       desc: desc.length ? desc : undefined,\r\n  //     },\r\n  //   };\r\n  //   dispatch(addEvent(obj));\r\n  //   refetchEvents();\r\n  //   handleCancel();\r\n  // };\r\n\r\n  // Reset Input Values on Close\r\n  const handleResetInputValues = () => {\r\n    // dispatch(selectEvent({}));\r\n    setTitle(\"\");\r\n    setDesc(\"\");\r\n    setValue([{ value: \"Travel\", label: \"Travel\" }]);\r\n    setStartPicker(new Date());\r\n    setEndPicker(new Date());\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  // // (UI) updateEventInCalendar\r\n  // const updateEventInCalendar = (\r\n  //   updatedEventData,\r\n  //   propsToUpdate,\r\n  //   extendedPropsToUpdate\r\n  // ) => {\r\n  //   const existingEvent = calendarApi.getEventById(updatedEventData.id);\r\n\r\n  //   // Set event properties except date related\r\n  //   for (let index = 0; index < propsToUpdate.length; index++) {\r\n  //     const propName = propsToUpdate[index];\r\n  //     existingEvent.setProp(propName, updatedEventData[propName]);\r\n  //   }\r\n\r\n  //   // Set date related props\r\n  //   existingEvent.setDates(updatedEventData.start, updatedEventData.end, {\r\n  //     allDay: updatedEventData.allDay,\r\n  //   });\r\n\r\n  //   // Set event's extendedProps\r\n  //   // eslint-disable-next-line no-plusplus\r\n  //   for (let index = 0; index < extendedPropsToUpdate.length; index++) {\r\n  //     const propName = extendedPropsToUpdate[index];\r\n  //     existingEvent.setExtendedProp(\r\n  //       propName,\r\n  //       updatedEventData.extendedProps[propName]\r\n  //     );\r\n  //   }\r\n  // };\r\n\r\n  // // Updates Event in Store\r\n  // const handleUpdateEvent = () => {\r\n  //   const eventToUpdate = {\r\n  //     id: selectedEvent.id,\r\n  //     title,\r\n  //     allDay,\r\n  //     start: startPicker,\r\n  //     end: endPicker,\r\n  //     extendedProps: {\r\n  //       description: desc,\r\n  //       calendar: value[0].label,\r\n  //     },\r\n  //   };\r\n\r\n  //   const propsToUpdate = [\"id\", \"title\"];\r\n  //   const extendedPropsToUpdate = [\"calendar\", \"description\"];\r\n\r\n  //   dispatch(updateEvent(eventToUpdate));\r\n  //   updateEventInCalendar(eventToUpdate, propsToUpdate, extendedPropsToUpdate);\r\n  //   setIsModalVisible(false);\r\n  // };\r\n\r\n  // // (UI) removeEventInCalendar\r\n  // const removeEventInCalendar = (eventId) => {\r\n  //   calendarApi.getEventById(eventId).remove();\r\n  // };\r\n\r\n  // const handleDeleteEvent = () => {\r\n  //   dispatch(removeEvent(selectedEvent.id));\r\n  //   removeEventInCalendar(selectedEvent.id);\r\n  //   setIsModalVisible(false);\r\n  // };\r\n\r\n  const FooterAddOrUpdate = () => {\r\n    // if (\r\n    //   isObjEmpty(selectedEvent) ||\r\n    //   (!isObjEmpty(selectedEvent) && !selectedEvent.title.length)\r\n    // ) {\r\n      return (\r\n        <Fragment>\r\n          <Button\r\n            onClick={() => {\r\n              handleAddEvent();\r\n              handleResetInputValues();\r\n            }}\r\n            type=\"primary\"\r\n            block\r\n          >\r\n            Add\r\n          </Button>\r\n        </Fragment>\r\n      );\r\n    // } else {\r\n    //   return (\r\n    //     <Fragment>\r\n    //       <Button\r\n    //         type=\"primary\"\r\n    //         onClick={() => {\r\n    //           setIsModalVisible(true);\r\n    //           handleResetInputValues();\r\n    //           handleUpdateEvent();\r\n    //         }}\r\n    //         block\r\n    //       >\r\n    //         Update\r\n    //       </Button>\r\n    //     </Fragment>\r\n    //   );\r\n    // }\r\n  };\r\n\r\n  const FooterCancelOrDelete = () => {\r\n    // if (\r\n    //   isObjEmpty(selectedEvent) ||\r\n    //   (!isObjEmpty(selectedEvent) && !selectedEvent.title.length)\r\n    // ) {\r\n      return (\r\n        <Fragment>\r\n          <Button\r\n            onClick={() => {\r\n              handleResetInputValues();\r\n            }}\r\n            type=\"primary\"\r\n            block\r\n            ghost\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </Fragment>\r\n      );\r\n    // } else {\r\n    //   return (\r\n    //     <Fragment>\r\n    //       <Button\r\n    //         type=\"danger\"\r\n    //         onClick={() => {\r\n    //           setIsModalVisible(true);\r\n    //           handleResetInputValues();\r\n    //           handleDeleteEvent();\r\n    //         }}\r\n    //         block\r\n    //         ghost\r\n    //       >\r\n    //         Delete\r\n    //       </Button>\r\n    //     </Fragment>\r\n    //   );\r\n    // }\r\n  };\r\n\r\n  const modalTitle = (\r\n    <h5 className=\"modal-title\">\r\n      \r\n      {/* {selectedEvent && selectedEvent.title && selectedEvent.title.length\r\n        ? \"Update\"\r\n        : \"Add\"} */}\r\n     Add Location\r\n    </h5>\r\n  );\r\n\r\n  return (\r\n    <Modal\r\n      visible={isModalVisible}\r\n      title={modalTitle}\r\n      onCancel={() => {\r\n        handleResetInputValues();\r\n        handleCancel();\r\n      }}\r\n      className=\"hp-modal-p-24\"\r\n      footer={\r\n        <Row justify=\"center\">\r\n          <Col span={12} className=\"hp-pr-4\">\r\n            <FooterCancelOrDelete />\r\n          </Col>\r\n\r\n          <Col span={12} className=\"hp-pl-4\">\r\n            <FooterAddOrUpdate />\r\n          </Col>\r\n        </Row>\r\n      }\r\n      centered\r\n      closeIcon={\r\n        <RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />\r\n      }\r\n      width={416}\r\n    >\r\n      <Form\r\n        layout=\"vertical\"\r\n        onSubmit={handleSubmit(() => {\r\n          // if (\r\n          //   isObjEmpty(selectedEvent) ||\r\n          //   (!isObjEmpty(selectedEvent) && !selectedEvent.title.length)\r\n          // ) {\r\n          //   handleAddEvent();\r\n          // } else {\r\n          //   handleUpdateEvent();\r\n          // }\r\n        })}\r\n      >\r\n        <Form.Item label=\"Location Name :\">\r\n          <Input\r\n            id=\"Location\"\r\n            name=\"Location\"\r\n            style={{ width: \"100%\" }}\r\n            placeholder=\"Location Name\"\r\n            value={title}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n          />\r\n        </Form.Item>\r\n\r\n\r\n        {/* <Form.Item label=\"Event :\">\r\n          <Select\r\n            id=\"label\"\r\n            value={value}\r\n            options={options}\r\n            classNamePrefix=\"select\"\r\n            isClearable={false}\r\n            onChange={(data) => setValue([data])}\r\n            components={{\r\n              Option: OptionComponent,\r\n            }}\r\n          />\r\n        </Form.Item> */}\r\n\r\n        {/* <Form.Item label=\"Description :\">\r\n          <TextArea\r\n            style={{ width: \"100%\" }}\r\n            type=\"textarea\"\r\n            name=\"text\"\r\n            id=\"description\"\r\n            rows={4}\r\n            value={desc}\r\n            onChange={(e) => setDesc(e.target.value)}\r\n            placeholder=\"Description\"\r\n          />\r\n        </Form.Item> */}\r\n      </Form>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default AddLocation;\r\n","import React, { useState } from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\n\r\nimport { Row, Col, Input, Card,Pagination } from \"antd\";\r\nimport { Table } from \"antd\";\r\n\r\nimport { Search } from \"react-iconly\";\r\n\r\nimport MasterPageTitle from \"../../../../layout/components/content/master-page-title\";\r\nimport AddLocation from \"./addLocations\";\r\nimport { Select } from \"antd\";\r\n\r\nexport default function Locations() {\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const columns = [\r\n    {\r\n      title: \"Name\",\r\n      dataIndex: \"name\",\r\n      filters: [\r\n        {\r\n          text: \"Joe\",\r\n          value: \"Joe\",\r\n        },\r\n        {\r\n          text: \"Category 1\",\r\n          value: \"Category 1\",\r\n          children: [\r\n            {\r\n              text: \"Yellow\",\r\n              value: \"Yellow\",\r\n            },\r\n            {\r\n              text: \"Pink\",\r\n              value: \"Pink\",\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          text: \"Category 2\",\r\n          value: \"Category 2\",\r\n          children: [\r\n            {\r\n              text: \"Green\",\r\n              value: \"Green\",\r\n            },\r\n            {\r\n              text: \"Black\",\r\n              value: \"Black\",\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n      filterMode: \"tree\",\r\n      filterSearch: true,\r\n      onFilter: (value, record) => record.name.includes(value),\r\n      width: \"30%\",\r\n    },\r\n    {\r\n      title: \"Age\",\r\n      dataIndex: \"age\",\r\n      sorter: (a, b) => a.age - b.age,\r\n    },\r\n    {\r\n      title: \"Address\",\r\n      dataIndex: \"address\",\r\n      filters: [\r\n        {\r\n          text: \"London\",\r\n          value: \"London\",\r\n        },\r\n        {\r\n          text: \"New York\",\r\n          value: \"New York\",\r\n        },\r\n      ],\r\n      onFilter: (value, record) => record.address.startsWith(value),\r\n      filterSearch: true,\r\n      width: \"40%\",\r\n    },\r\n  ];\r\n\r\n  const data = [\r\n    {\r\n      key: \"1\",\r\n      name: \"John Brown\",\r\n      age: 32,\r\n      address: \"New York No. 1 Lake Park\",\r\n    },\r\n    {\r\n      key: \"2\",\r\n      name: \"Jim Green\",\r\n      age: 42,\r\n      address: \"London No. 1 Lake Park\",\r\n    },\r\n    {\r\n      key: \"3\",\r\n      name: \"Joe Black\",\r\n      age: 32,\r\n      address: \"Sidney No. 1 Lake Park\",\r\n    },\r\n    {\r\n      key: \"4\",\r\n      name: \"Jim Red\",\r\n      age: 32,\r\n      address: \"London No. 2 Lake Park\",\r\n    },\r\n  ];\r\n  const { Option } = Select;\r\n  function onChange(pagination, filters, sorter, extra) {\r\n    console.log(\"params\", pagination, filters, sorter, extra);\r\n  }\r\n  const showModal = () => {\r\n    setIsModalVisible(true);\r\n  };\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  function onChange(value) {\r\n    console.log(\"selected\", value);\r\n  }\r\n\r\n  function onBlur() {\r\n    console.log(\"blur\");\r\n  }\r\n\r\n  function onFocus() {\r\n    console.log(\"focus\");\r\n  }\r\n\r\n  function onSearch(val) {\r\n    console.log(\"search:\", val);\r\n  }\r\n  function showTotal(total) {\r\n    return \"Total \" + total + \" items\";\r\n  }\r\n  return (\r\n    <Row gutter={[32, 32]} className=\"hp-mt-32\">\r\n      <MasterPageTitle\r\n        pageTitle=\"Location Master\"\r\n        addModelTile=\"Add Location\"\r\n        goBack={true}\r\n        showModal={showModal}\r\n        isModalVisible={isModalVisible}\r\n      />\r\n\r\n      <Col span={24}>\r\n        <Card>\r\n          <Row className=\"hp-mb-12\">\r\n            <Col span={12}>\r\n              <Input\r\n              className=\"hp-mb-12\"\r\n                placeholder=\"Default\"\r\n                prefix={\r\n                  <Search set=\"curved\" className=\"remix-icon\" size={16} />\r\n                }\r\n              />\r\n            </Col>\r\n            <Col span={12}>\r\n              <Select\r\n                className=\"hp-float-right hp-mb-12\"\r\n                showSearch\r\n                style={{ width: 80 }}\r\n                placeholder=\"10\"\r\n                optionFilterProp=\"children\"\r\n                onChange={onChange}\r\n                onFocus={onFocus}\r\n                onBlur={onBlur}\r\n                onSearch={onSearch}\r\n                filterOption={(input, option) =>\r\n                  option.children.toLowerCase().indexOf(input.toLowerCase()) >=\r\n                  0\r\n                }\r\n              >\r\n                <Option value=\"10\">10</Option>\r\n                <Option value=\"20\">20</Option>\r\n                <Option value=\"30\">30</Option>\r\n              </Select>\r\n            </Col>\r\n            <Col span={24}>\r\n              <Table\r\n                columns={columns}\r\n                dataSource={data}\r\n                onChange={onChange}\r\n                scroll={{ x: 500 }}\r\n                pagination={false}\r\n                size=\"middle\"\r\n              />\r\n            </Col>\r\n            <Col span={24} >\r\n              \r\n              <Pagination\r\n                size=\"small\"\r\n                total={50}\r\n                showTotal={showTotal}\r\n                // showSizeChanger\r\n                // showQuickJumper\r\n                className=\"hp-mb-12  hp-mt-24 hp-float-right\"\r\n              />\r\n            </Col>\r\n          </Row>\r\n        </Card>\r\n      </Col>\r\n      <AddLocation\r\n        // store={store}\r\n        // dispatch={dispatch}\r\n        // addEvent={addEvent}\r\n        // selectEvent={selectEvent}\r\n        // updateEvent={updateEvent}\r\n        // removeEvent={removeEvent}\r\n        // calendarApi={calendarApi}\r\n        // refetchEvents={refetchEvents}\r\n        handleCancel={handleCancel}\r\n        isModalVisible={isModalVisible}\r\n        setIsModalVisible={setIsModalVisible}\r\n        showModal={showModal}\r\n      />\r\n    </Row>\r\n  );\r\n}\r\n"],"sourceRoot":""}