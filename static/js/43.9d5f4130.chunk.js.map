{"version":3,"sources":["layout/components/content/master-page-title/index.jsx","view/components/data-entry/inputs/numberInput.jsx","view/pages/MastersDashboard/counters/addCounter.jsx","view/pages/MastersDashboard/counters/Filters/Filter.jsx","view/pages/MastersDashboard/counters/index.jsx"],"names":["MasterPageTitle","props","history","useHistory","pageTitle","pageText","addModelTile","goBack","setIsModalVisible","span","className","to","onClick","size","type","block","icon","isMobile","NumericInput","value","onChange","onBlur","e","inputValue","target","test","key","name","valueTemp","charAt","length","slice","replace","connect","counters","mini","rowdata","model","miniZonesList","miniStatesList","miniDistrictList","miniDivisionsList","miniClustersList","miniAreaList","miniCityList","counterAdd","isModelVisible","InputChangeValue","getMiniDistrict","getMiniZones","getMiniDivisions","getMiniClusters","getMiniStates","getMiniCity","getMiniArea","Form","useForm","form","ChangeHandeler","useEffect","handleResetInputValues","FooterAddOrUpdate","id","submit","FooterCancel","ghost","modalTitle","setFieldsValue","zone_id","division_id","cluster_id","latitude","longitude","state_id","district_id","city_id","area_id","pincode","address","mobile","visible","title","onCancel","resetFields","footer","justify","centered","closeIcon","width","layout","autoComplete","onFinish","obj","is_active","handleAdd","handleUpdate","md","xs","Item","label","rules","required","message","hasFeedback","style","placeholder","showSearch","filterOption","input","option","children","toLowerCase","includes","optionFilterProp","map","index","Option","zone","min","maxLength","division","cluster","pattern","RegExp","state","district","city","area","getValueProps","TextArea","checkedChildren","unCheckedChildren","checked","date","Date","getFullYear","getMonth","drawer","countersParams","miniCountryList","isDrawerVisible","SetCountersParams","FilterInputChangeValue","getCounters","getMinicountry","getMiniStatesClearData","getMiniDistrictClearData","getMiniCityClearData","getMinicountryClearData","getMiniZonesClearData","getMiniClustersClearData","getMiniDivisionsClearData","getMiniAreaClearData","disableDateRanges","range","startDate","endDate","current","startCheck","endCheck","moment","format","start_date","end_date","country","gutter","onClose","placement","bodyStyle","paddingBottom","initialValues","remember","page","search","page_size","add","picker","disabledDate","disabled","allowClear","country_id","htmlType","system","counterslist","noofpages","listCount","loading","userAccessList","counterEdit","counterDelete","Search","Input","columnClass","columns","dataIndex","filterSearch","render","row","filterMode","color","type_name","record","indexOf","cursor","onConfirm","okText","cancelText","data","zonename","clustername","divisionname","typeIndex","isModalVisible","sm","lg","xl","xxl","onSearch","val","FilterOutlined","exportData","UploadOutlined","tip","spinning","delay","dataSource","scroll","x","pagination","pageSize","total","showTotal","showSizeChanger","Filter"],"mappings":"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","file":"static/js/43.9d5f4130.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { Card, Col, Row, Button } from \"antd\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nimport { RiAddCircleFill, RiArrowLeftCircleFill } from \"react-icons/ri\";\nimport { isMobile } from \"react-device-detect\";\n\nexport default function MasterPageTitle(props) {\n  let history = useHistory();\n  const { pageTitle, pageText, addModelTile, goBack, setIsModalVisible } =\n    props;\n\n  return (\n    <Col span={24}>\n      <Card className=\"hp-m-0\">\n        <Row>\n          <Col span={18}>\n            {goBack && (\n              <Link\n                to=\"#\"\n                onClick={() => history.goBack()}\n                className=\"action-icon text-primary  hp-mr-12 hp-d-inline-block\"\n              >\n                <RiArrowLeftCircleFill className=\"remix-icon\" size={24} />\n              </Link>\n            )}\n            <Row className=\"hp-d-inline-block\">\n              <Col span={24}>\n                {pageTitle && <h2 className=\"hp-m-0\">{pageTitle}</h2>}\n              </Col>\n\n              <Col span={24}>\n                {pageText && <p className=\"hp-mb-0 hp-p1-body\">{pageText}</p>}\n              </Col>\n            </Row>\n          </Col>\n          <Col span={6}>\n            {addModelTile && (\n              <Button\n                className=\"hp-float-right\"\n                type=\"primary\"\n                onClick={() => setIsModalVisible(true)}\n                block\n                icon={<RiAddCircleFill className=\"remix-icon\" size={22} />}\n              >\n                {!isMobile && addModelTile}\n              </Button>\n            )}\n          </Col>\n        </Row>\n      </Card>\n    </Col>\n  );\n}\n","import { Input, Tooltip } from \"antd\";\n\nconst formatNumber = (value) => new Intl.NumberFormat().format(value);\n\nexport default function NumericInput(props) {\n  const { value, onChange, onBlur } = props;\n\n  const handleChange = (e) => {\n    const { value: inputValue } = e.target;\n    const reg = /^-?\\d*(\\.\\d*)?$/;\n\n    if (reg.test(inputValue) || inputValue === \"\" || inputValue === \"-\") {\n      onChange({ key: props.name, value: inputValue });\n    }\n  }; // '.' at the end or only '-' in the input box.\n\n  const handleBlur = () => {\n    let valueTemp = value;\n\n    if (value.charAt(value.length - 1) === \".\" || value === \"-\") {\n      valueTemp = value.slice(0, -1);\n    }\n\n    // onChange({ key: props.name, value: valueTemp.replace(/0*(\\d+)/, \"$1\") });\n    onBlur({ key: props.name, value: valueTemp.replace(/0*(\\d+)/, \"$1\") });\n  };\n\n  return (\n    <Input\n      {...props}\n      onChange={handleChange}\n      onBlur={props.onBlur && handleBlur}\n    />\n  );\n}\n","import { Fragment, useState, useEffect } from \"react\";\n\nimport { connect } from \"react-redux\";\n\nimport \"flatpickr/dist/themes/light.css\";\nimport { RiCloseFill } from \"react-icons/ri\";\nimport {\n  Button,\n  Input,\n  Form,\n  Modal,\n  Badge,\n  Row,\n  Col,\n  Select,\n  DatePicker,\n  Switch,\n} from \"antd\";\n// import NumericInput from \"../../../components/data-entry/inputs/numberInput\";\n\nimport NumericInput from \"../../../components/data-entry/inputs/numberInput\";\n\nimport {\n  counterAdd,\n  isModelVisible,\n  InputChangeValue,\n} from \"../../../../store/Masters/Counters/counterSlice\";\n\nimport {\n  getMiniClusters,\n  getMiniStates,\n  getMiniDistrict,\n  getMiniDivisions,\n  getMiniZones,\n  getMiniArea,\n  getMiniCity,\n} from \"../../../../store/mini/miniSlice\";\n\nconst AddCounter = (props) => {\n  const [form] = Form.useForm();\n  useEffect(() => {\n    props.getMiniStates();\n    props.getMiniZones();\n  }, []);\n\n  function ChangeHandeler(e) {\n    props.InputChangeValue({\n      key: e.target.name,\n      value: e.target.value,\n    });\n  }\n\n  const countertypeList = [\n    { id: 1, name: \"Physical\" },\n    { id: 2, name: \"Virtual\" },\n  ];\n\n  // Adds New Country\n  const handleAdd = () => {\n    const obj = {\n      id: 0,\n      name: props.rowdata?.name,\n      type: props.rowdata?.type,\n      latitude: props.rowdata?.latitude,\n      longitude: props.rowdata?.longitude,\n      state_id: props.rowdata.state_id,\n      district_id: props.rowdata.district_id,\n      zone_id: props.rowdata.zone_id,\n      division_id: props.rowdata.division_id,\n      cluster_id: props.rowdata.cluster_id,\n      city_id: props.rowdata.city_id,\n      area_id: props.rowdata.area_id,\n      address: props.rowdata.address,\n      pincode: props.rowdata.pincode,\n      is_active: props.rowdata.is_active,\n      mobile: props.rowdata.mobile,\n    };\n    props.counterAdd(obj);\n    if (obj.name != null || obj.name == \"\") {\n    }\n  };\n  // Updates Country in Store\n  const handleUpdate = () => {\n    const obj = {\n      id: props.rowdata?.id,\n      name: props.rowdata?.name,\n      type: props.rowdata?.type,\n      latitude: props.rowdata?.latitude,\n      longitude: props.rowdata?.longitude,\n      state_id: props.rowdata.state_id,\n      district_id: props.rowdata.district_id,\n      zone_id: props.rowdata.zone_id,\n      division_id: props.rowdata.division_id,\n      cluster_id: props.rowdata.cluster_id,\n      city_id: props.rowdata.city_id,\n      area_id: props.rowdata.area_id,\n      address: props.rowdata.address,\n      pincode: props.rowdata.pincode,\n      is_active: props.rowdata.is_active,\n      mobile: props.rowdata.mobile,\n    };\n    props.counterAdd(obj);\n  };\n\n  // Reset Input Values on Close\n  const handleResetInputValues = () => {\n    props.isModelVisible(false);\n  };\n\n  const FooterAddOrUpdate = () => {\n    if (props.rowdata.id == null || props.rowdata.id == 0) {\n      return (\n        <Fragment>\n          <Button\n            onClick={() => {\n              form.submit();\n            }}\n            type=\"primary\"\n            block\n          >\n            Add\n          </Button>\n        </Fragment>\n      );\n    } else {\n      return (\n        <Fragment>\n          <Button\n            type=\"primary\"\n            onClick={() => {\n              form.submit();\n            }}\n            block\n          >\n            Update\n          </Button>\n        </Fragment>\n      );\n    }\n  };\n\n  const FooterCancel = () => {\n    return (\n      <Fragment>\n        <Button\n          onClick={() => {\n            handleResetInputValues();\n          }}\n          type=\"primary\"\n          block\n          ghost\n        >\n          Cancel\n        </Button>\n      </Fragment>\n    );\n  };\n\n  const modalTitle = (\n    <h5 className=\"modal-title\">\n      {props.rowdata.id == null || props.rowdata.id == 0 ? \"Add\" : \"Update\"}{\" \"}\n      Counter\n    </h5>\n  );\n\n  useEffect(() => {\n    form.setFieldsValue({\n      name: props.rowdata.name,\n      type: props.rowdata.type,\n      zone_id: props.rowdata.zone_id,\n      division_id: props.rowdata.division_id,\n      cluster_id: props.rowdata.cluster_id,\n      latitude: props.rowdata.latitude,\n      longitude: props.rowdata.longitude,\n      state_id: props.rowdata.state_id,\n      district_id: props.rowdata.district_id,\n      city_id: props.rowdata.city_id,\n      area_id: props.rowdata.area_id,\n      pincode: props.rowdata.pincode,\n      address: props.rowdata.address,\n      mobile: props.rowdata.mobile,\n    });\n  }, [props.rowdata]);\n\n  return (\n    <Modal\n      visible={props.model}\n      title={modalTitle}\n      onCancel={() => {\n        handleResetInputValues();\n        form.resetFields();\n        props.isModelVisible(false);\n      }}\n      className=\"hp-modal-p-24\"\n      footer={\n        <Row justify=\"center\">\n          <Col span={12} className=\"hp-pr-4\">\n            <FooterCancel />\n          </Col>\n\n          <Col span={12} className=\"hp-pl-4\">\n            <FooterAddOrUpdate />\n          </Col>\n        </Row>\n      }\n      centered\n      closeIcon={\n        <RiCloseFill className=\"remix-icon text-color-black-100\" size={24} />\n      }\n      width={916}\n    >\n      <Form\n        layout=\"vertical\"\n        form={form}\n        name=\"userForm\"\n        autoComplete=\"off\"\n        onFinish={() => {\n          if (props.rowdata.id == null) {\n            handleAdd();\n          } else {\n            handleUpdate();\n          }\n        }}\n      >\n        <Row>\n          <Col md={6} xs={24} className=\"hp-pr-sm-0 hp-pr-12\">\n            <Form.Item\n              label=\"Counter Name :\"\n              name=\"name\"\n              rules={[\n                { required: true, message: \"Please input your Counter Name!\" },\n                // {\n                //   pattern: new RegExp(/^[a-zA-Z][a-zA-Z\\s]+$/i),\n                //   message: \"field does not accept numbers\",\n                // },\n              ]}\n              hasFeedback\n            >\n              <Input\n                id=\"Countername\"\n                name=\"name\"\n                style={{ width: \"100%\" }}\n                placeholder=\"Countername\"\n                value={props.rowdata?.name}\n                onChange={ChangeHandeler}\n              />\n            </Form.Item>\n          </Col>\n\n          <Col md={6} xs={24} className=\"hp-pr-sm-0 hp-pr-12\">\n            <Form.Item\n              label=\"Counter Type\"\n              name=\"type\"\n              rules={[\n                { required: true, message: \"Please select your Counter Type!\" },\n              ]}\n              hasFeedback\n            >\n              <Select\n                showSearch\n                filterOption={(input, option) =>\n                  option.children.toLowerCase().includes(input.toLowerCase())\n                }\n                placeholder=\"Select Counter Type\"\n                optionFilterProp=\"type\"\n                onChange={(value) => {\n                  props.InputChangeValue({\n                    key: \"type\",\n                    value: value,\n                  });\n                }}\n                value={props.rowdata.type == null ? \"\" : props.rowdata?.type}\n              >\n                {countertypeList.map((type, index) => {\n                  return (\n                    <Option key={index} value={type.id}>\n                      {type.name}\n                    </Option>\n                  );\n                })}\n              </Select>\n            </Form.Item>\n          </Col>\n\n          <Col md={6} xs={24} className=\"hp-pr-sm-0 hp-pr-12\">\n            <Form.Item\n              label=\"Zone Name:\"\n              name=\"zone_id\"\n              rules={[\n                { required: true, message: \"Please input your Zone Name!\" },\n              ]}\n              hasFeedback\n            >\n              <Select\n                showSearch\n                placeholder=\"Select  Zone\"\n                optionFilterProp=\"zone\"\n                filterOption={(input, option) =>\n                  option.children.toLowerCase().includes(input.toLowerCase())\n                }\n                onChange={(value) => {\n                  props.getMiniDivisions({ zone: value });\n                  props.InputChangeValue({\n                    key: \"zone_id\",\n                    value: value,\n                  });\n                }}\n                value={\n                  props.rowdata.zone_id == null ? \"\" : props.rowdata?.zone_id\n                }\n              >\n                {props.miniZonesList.map((zone, index) => {\n                  return (\n                    <Option key={index} value={zone.id}>\n                      {zone.name}\n                    </Option>\n                  );\n                })}\n              </Select>\n            </Form.Item>\n          </Col>\n\n          <Col md={6} xs={24} className=\"hp-pr-sm-0 hp-pr-12\">\n            <Form.Item\n              label=\"Mobile Number :\"\n              name=\"mobile\"\n              rules={[\n                {\n                  required: true,\n                  message: \"Please input your Mobile Number!\",\n                },\n                {\n                  min: 10,\n                  message: \"Not a valid Mobile Number!\",\n                },\n              ]}\n              hasFeedback\n            >\n              <NumericInput\n                id=\"mobile\"\n                name=\"mobile\"\n                style={{ width: \"100%\" }}\n                placeholder=\"Mobile Number\"\n                value={props.rowdata.mobile}\n                maxLength={10}\n                onChange={props.InputChangeValue}\n              />\n            </Form.Item>\n          </Col>\n          \n\n          <Col md={6} xs={24} className=\"hp-pr-sm-0 hp-pr-12\">\n            <Form.Item\n              label=\"Division Name:\"\n              name=\"division_id\"\n              rules={[\n                { required: true, message: \"Please input your Division Name!\" },\n              ]}\n              hasFeedback\n            >\n              <Select\n                showSearch\n                placeholder=\"Select  Division\"\n                optionFilterProp=\"division\"\n                filterOption={(input, option) =>\n                  option.children.toLowerCase().includes(input.toLowerCase())\n                }\n                onChange={(value) => {\n                  props.getMiniClusters({ division: value });\n                  props.InputChangeValue({\n                    key: \"division_id\",\n                    value: value,\n                  });\n                }}\n                value={\n                  props.rowdata.division_id == null\n                    ? \"\"\n                    : props.rowdata?.division_id\n                }\n              >\n                {props.miniDivisionsList.map((division, index) => {\n                  return (\n                    <Option key={index} value={division.id}>\n                      {division.name}\n                    </Option>\n                  );\n                })}\n              </Select>\n            </Form.Item>\n          </Col>\n\n          <Col md={6} xs={24} className=\"hp-pr-sm-0 hp-pr-12\">\n            <Form.Item\n              label=\"Cluster Name:\"\n              name=\"cluster_id\"\n              rules={[\n                { required: true, message: \"Please input your Cluster Name!\" },\n              ]}\n              hasFeedback\n            >\n              <Select\n                showSearch\n                placeholder=\"Select Cluster\"\n                optionFilterProp=\"cluster\"\n                filterOption={(input, option) =>\n                  option.children.toLowerCase().includes(input.toLowerCase())\n                }\n                onChange={(value) => {\n                  props.InputChangeValue({\n                    key: \"cluster_id\",\n                    value: value,\n                  });\n                }}\n                value={\n                  props.rowdata.cluster_id == null\n                    ? \"\"\n                    : props.rowdata?.cluster_id\n                }\n              >\n                {props.miniClustersList.map((cluster, index) => {\n                  return (\n                    <Option key={index} value={cluster.id}>\n                      {cluster.name}\n                    </Option>\n                  );\n                })}\n              </Select>\n            </Form.Item>\n          </Col>\n\n          <Col md={6} xs={24} className=\"hp-pr-sm-0 hp-pr-12\">\n            <Form.Item\n              label=\"Longitude :\"\n              name=\"longitude\"\n              rules={[\n                {\n                  required: true,\n                  message: \"Please input your Longitude Number!\",\n                },\n                {\n                  pattern: new RegExp(\n                    /^-?([1]?[1-7][1-9]|[1]?[1-8][0]|[1-9]?[0-9])\\.{1}\\d{1,6}$/\n                  ),\n                  message: \"Please enter your Longitude Number!\",\n                },\n              ]}\n              hasFeedback\n            >\n              <NumericInput\n                id=\"Longitude\"\n                name=\"longitude\"\n                style={{ width: \"100%\" }}\n                placeholder=\"Longitude\"\n                value={props.rowdata.longitude}\n                onChange={props.InputChangeValue}\n              />\n            </Form.Item>\n          </Col>\n\n          <Col md={6} xs={24} className=\"hp-pr-sm-0 hp-pr-12\">\n            <Form.Item\n              label=\"Latitude :\"\n              name=\"latitude\"\n              rules={[\n                {\n                  required: true,\n                  message: \"Please input your Latitude Number!\",\n                },\n                {\n                  pattern: new RegExp(/^-?([1-8]?[1-9]|[1-9]0)\\.{1}\\d{1,6}$/),\n                  message: \"Please input your Latitude Number!\",\n                },\n              ]}\n              hasFeedback\n            >\n              <NumericInput\n                id=\"Latitude\"\n                name=\"latitude\"\n                style={{ width: \"100%\" }}\n                placeholder=\"Latitude\"\n                value={props.rowdata.latitude}\n                onChange={props.InputChangeValue}\n              />\n            </Form.Item>\n          </Col>\n\n          <Col md={10} xs={24}>\n            <Row>\n              <Col md={12} xs={24} className=\"hp-pr-sm-0 hp-pr-12\">\n                <Form.Item\n                  label=\"State :\"\n                  name=\"state_id\"\n                  rules={[\n                    { required: true, message: \"Please select your State!\" },\n                  ]}\n                  hasFeedback\n                >\n                  <Select\n                    showSearch\n                    placeholder=\"Select State\"\n                    optionFilterProp=\"state\"\n                    filterOption={(input, option) =>\n                      option.children\n                        .toLowerCase()\n                        .includes(input.toLowerCase())\n                    }\n                    onChange={(value) => {\n                      props.getMiniDistrict({ state: value });\n                      props.InputChangeValue({\n                        key: \"state_id\",\n                        value: value,\n                      });\n                    }}\n                    value={\n                      props.rowdata.state_id == null\n                        ? \"\"\n                        : props.rowdata?.state_id\n                    }\n                  >\n                    {props.miniStatesList.map((state, index) => {\n                      return (\n                        <Option key={index} value={state.id}>\n                          {state.name}\n                        </Option>\n                      );\n                    })}\n                  </Select>\n                </Form.Item>\n              </Col>\n\n              <Col md={12} xs={24} className=\"hp-pr-sm-0 hp-pr-12\">\n                <Form.Item\n                  label=\"District :\"\n                  name=\"district_id\"\n                  rules={[\n                    { required: true, message: \"Please select your District!\" },\n                  ]}\n                  hasFeedback\n                >\n                  <Select\n                    showSearch\n                    placeholder=\"Select  District\"\n                    optionFilterProp=\"district\"\n                    filterOption={(input, option) =>\n                      option.children\n                        .toLowerCase()\n                        .includes(input.toLowerCase())\n                    }\n                    onChange={(value) => {\n                      props.getMiniCity({ district: value });\n                      props.InputChangeValue({\n                        key: \"district_id\",\n                        value: value,\n                      });\n                    }}\n                    value={\n                      props.rowdata.district_id == null\n                        ? \"\"\n                        : props.rowdata?.district_id\n                    }\n                  >\n                    {props.miniDistrictList.map((district, index) => {\n                      return (\n                        <Option key={index} value={district.id}>\n                          {district.name}\n                        </Option>\n                      );\n                    })}\n                  </Select>\n                </Form.Item>\n              </Col>\n            </Row>\n          </Col>\n\n          <Col md={14} xs={24}>\n            <Row>\n              <Col md={8} xs={24} className=\"hp-pr-sm-0 hp-pr-12\">\n                <Form.Item\n                  label=\"City :\"\n                  name=\"city_id\"\n                  rules={[\n                    { required: true, message: \"Please select your City!\" },\n                  ]}\n                  hasFeedback\n                >\n                  <Select\n                    showSearch\n                    placeholder=\"Select  City\"\n                    optionFilterProp=\"city\"\n                    filterOption={(input, option) =>\n                      option.children\n                        .toLowerCase()\n                        .includes(input.toLowerCase())\n                    }\n                    onChange={(value) => {\n                      props.getMiniArea({ city: value });\n                      props.InputChangeValue({\n                        key: \"city_id\",\n                        value: value,\n                      });\n                    }}\n                    value={\n                      props.rowdata.city_id == null\n                        ? \"\"\n                        : props.rowdata?.city_id\n                    }\n                  >\n                    {props.miniCityList.map((city, index) => {\n                      return (\n                        <Option key={index} value={city.id}>\n                          {city.name}\n                        </Option>\n                      );\n                    })}\n                  </Select>\n                </Form.Item>\n              </Col>\n\n              <Col md={8} xs={24} className=\"hp-pr-sm-0 hp-pr-12\">\n                <Form.Item\n                  label=\"Area :\"\n                  name=\"area_id\"\n                  rules={[\n                    { required: true, message: \"Please select your Area!\" },\n                  ]}\n                  hasFeedback\n                >\n                  <Select\n                    showSearch\n                    placeholder=\"Select  Area\"\n                    optionFilterProp=\"area\"\n                    filterOption={(input, option) =>\n                      option.children\n                        .toLowerCase()\n                        .includes(input.toLowerCase())\n                    }\n                    onChange={(value) => {\n                      props.InputChangeValue({\n                        key: \"area_id\",\n                        value: value,\n                      });\n                    }}\n                    value={\n                      props.rowdata.area_id == null\n                        ? \"\"\n                        : props.rowdata?.area_id\n                    }\n                  >\n                    {props.miniAreaList.map((area, index) => {\n                      return (\n                        <Option key={index} value={area.id}>\n                          {area.name}\n                        </Option>\n                      );\n                    })}\n                  </Select>\n                </Form.Item>\n              </Col>\n\n              <Col md={8} xs={24} className=\"hp-pr-sm-0 hp-pr-12\">\n                <Form.Item\n                  label=\"Pincode :\"\n                  name=\"pincode\"\n                  rules={[\n                    {\n                      required: true,\n                      message: \"Please input your pincode!\",\n                    },\n                    {\n                      pattern: new RegExp(/^\\d{6}$/g),\n                      message: \"Please type correct pincode\",\n                    },\n                  ]}\n                  getValueProps={() => {}}\n                  hasFeedback\n                >\n                  <NumericInput\n                    id=\"Pincode\"\n                    name=\"pincode\"\n                    style={{ width: \"100%\" }}\n                    placeholder=\"Pincode\"\n                    maxLength={6}\n                    value={\n                      props.rowdata.pincode == null\n                        ? \"\"\n                        : props.rowdata?.pincode\n                    }\n                    onChange={props.InputChangeValue}\n                  />\n                </Form.Item>\n              </Col>\n            </Row>\n          </Col>\n\n          <Col md={24} xs={24} className=\"hp-pr-sm-0 hp-pr-12\">\n            <Form.Item\n              label=\"Address \"\n              name=\"address\"\n              rules={[\n                {\n                  required: true,\n                  message: \"Please input your Address \",\n                },\n              ]}\n              hasFeedback\n            >\n              <Input.TextArea\n                id=\"Address\"\n                name=\"address\"\n                style={{ width: \"100%\" }}\n                placeholder=\"Address\"\n                value={props.rowdata?.address}\n                onChange={ChangeHandeler}\n              />\n            </Form.Item>\n          </Col>\n          <Col md={24} xs={24}>\n            <Form.Item\n              label=\"Counter Status\"\n              name=\"is_active\"\n              className=\"hp-m-0\"\n            >\n              <Switch\n                id=\"is_active\"\n                size=\"default\"\n                checkedChildren=\"Active\"\n                unCheckedChildren=\"Inactive\"\n                checked={props.rowdata.is_active}\n                onChange={(value) => {\n                  props.InputChangeValue({\n                    key: \"is_active\",\n                    value: value,\n                  });\n                }}\n              />\n            </Form.Item>\n          </Col>\n        </Row>\n      </Form>\n    </Modal>\n  );\n};\n\nfunction mapStateToProps({ counters, mini }) {\n  return {\n    rowdata: counters.rowdata,\n    model: counters.model,\n    miniZonesList: mini.miniZonesList,\n    miniStatesList: mini.miniStatesList,\n    miniDistrictList: mini.miniDistrictList,\n    miniDivisionsList: mini.miniDivisionsList,\n    miniClustersList: mini.miniClustersList,\n    miniAreaList: mini.miniAreaList,\n    miniCityList: mini.miniCityList,\n  };\n}\n\nexport default connect(mapStateToProps, {\n  counterAdd,\n  isModelVisible,\n  InputChangeValue,\n  getMiniDistrict,\n  getMiniZones,\n  getMiniDivisions,\n  getMiniClusters,\n  getMiniStates,\n  getMiniCity,\n  getMiniArea,\n})(AddCounter);\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  Row,\n  Col,\n  Divider,\n  Form,\n  Input,\n  Button,\n  Drawer,\n  Space,\n  Select,\n  DatePicker,\n} from \"antd\";\nimport moment, { min } from \"moment\";\n\nimport {\n  isDrawerVisible,\n  FilterInputChangeValue,\n  getCounters,\n  SetCountersParams,\n} from \"../../../../../store/Masters/Counters/counterSlice\";\nimport {\n  getMiniStates,\n  getMiniDistrict,\n  getMiniCity,\n  getMinicountry,\n  getMiniClusters,\n  getMiniDivisions,\n  getMiniZones,\n  getMiniArea,\n  getMiniStatesClearData,\n  getMiniDistrictClearData,\n  getMiniCityClearData,\n  getMinicountryClearData,\n  getMiniZonesClearData,\n  getMiniClustersClearData,\n  getMiniDivisionsClearData,\n  getMiniAreaClearData,\n} from \"../../../../../store/mini/miniSlice\";\n\nvar date = new Date(),\n  y = date.getFullYear(),\n  m = date.getMonth();\n\nconst filter = (props) => {\n  const [form] = Form.useForm();\n  useEffect(() => {\n    props.getMinicountry();\n    props.getMiniStates();\n    props.getMiniDistrict();\n    props.getMiniCity();\n    props.getMiniArea();\n    props.getMiniZones();\n    props.getMiniClusters();\n    props.getMiniDivisions();\n  }, []);\n\n  const onFinish = () => {\n    props.SetCountersParams({\n      ...props.countersParams,\n      start_date: props.countersParams.start_date,\n      end_date: props.countersParams.end_date,\n      page: 1,\n      search: \"\",\n      page_size: 10,\n    });\n\n    props.getCounters({\n      ...props.countersParams,\n      start_date:\n        props.countersParams.start_date != null &&\n        props.countersParams.start_date != \"\"\n          ? moment(props.countersParams.start_date).format(\"YYYY-MM-DD\")\n          : \"\",\n      end_date:\n        props.countersParams.end_date != null &&\n        props.countersParams.end_date != \"\"\n          ? moment(props.countersParams.end_date)\n              .add(1, \"days\")\n              .format(\"YYYY-MM-DD\")\n          : \"\",\n      page: 1,\n      search: \"\",\n      page_size: 10,\n    });\n    props.isDrawerVisible(false);\n  };\n\n  function clearFilter() {\n    props.SetCountersParams({\n      start_date: \"\",\n      end_date: \"\",\n      page: 1,\n      search: \"\",\n      page_size: 10,\n    });\n\n    props.getCounters({\n      start_date: \"\",\n      end_date: \"\",\n      page: 1,\n      search: \"\",\n      page_size: 10,\n    });\n\n    props.getMiniZones();\n    props.getMiniClusters();\n    props.getMiniDivisions();\n    props.getMinicountry();\n    props.getMiniStates();\n    props.getMiniDistrict();\n    props.getMiniCity();\n    props.getMiniArea();\n  }\n  function disableDateRanges(range = { startDate: false, endDate: false }) {\n    const { startDate, endDate } = range;\n    return function disabledDate(current) {\n      let startCheck = true;\n      let endCheck = true;\n      if (startDate) {\n        startCheck =\n          current &&\n          current < moment(startDate + \" 00:00:01\", \"YYYY-MM-DD HH:mm:ss\");\n      }\n      if (endDate) {\n        endCheck =\n          current &&\n          current >\n            moment(\n              moment(endDate).format(\"YYYY-MM-DD\") + \" 23:59:59\",\n              \"YYYY-MM-DD HH:mm:ss\"\n            );\n      }\n\n      return (startDate && startCheck) || (endDate && endCheck);\n    };\n  }\n\n  useEffect(() => {\n    form.setFieldsValue({\n      start_date: props.countersParams?.start_date,\n      end_date: props.countersParams?.end_date,\n      zone: props.countersParams?.zone,\n      division: props.countersParams?.division,\n      cluster: props.countersParams?.cluster,\n      country: props.countersParams?.country,\n      state: props.countersParams?.state,\n      district: props.countersParams?.district,\n      city: props.countersParams?.city,\n      area: props.countersParams?.area,\n    });\n  }, [props.countersParams]);\n\n  function onSearch(val) {\n    props.getCounters({ page: 1, search: val, page_size: 10 });\n  }\n  return (\n    <Row gutter={[24, 24]}>\n      <Col span={24}>\n        <Drawer\n          title=\"Filters\"\n          width={420}\n          className=\"hp-drawer-mobile\"\n          onClose={() => {\n            props.isDrawerVisible(false);\n          }}\n          placement=\"right\"\n          visible={props.drawer}\n          bodyStyle={{\n            paddingBottom: 10,\n          }}\n        >\n          <Form\n            form={form}\n            layout=\"vertical\"\n            name=\"basic\"\n            initialValues={{ remember: true }}\n            onFinish={onFinish}\n          >\n            <Row gutter={[12, 12]}>\n              <Col span={12}>\n                <Form.Item label=\"From Date\" name=\"start_date\">\n                  <DatePicker\n                    style={{ width: \"100%\" }}\n                    picker=\"date\"\n                    placeholder=\"Choose Date\"\n                    format=\"DD-MM-YYYY\"\n                    disabledDate={disableDateRanges({\n                      endDate: new Date(),\n                    })}\n                    onChange={(date) => {\n                      props.FilterInputChangeValue({\n                        key: \"start_date\",\n                        value: date == null ? \"\" : date,\n                      });\n                      if (date == null) {\n                        props.FilterInputChangeValue({\n                          key: \"end_date\",\n                          value: \"\",\n                        });\n                      }\n                    }}\n                  />\n                </Form.Item>\n              </Col>\n\n              <Col span={12}>\n                <Form.Item label=\"To Date\" name=\"end_date\">\n                  <DatePicker\n                    style={{ width: \"100%\" }}\n                    picker=\"date\"\n                    placeholder=\"Choose Date\"\n                    format=\"DD-MM-YYYY\"\n                    disabledDate={disableDateRanges({\n                      endDate: moment().format(\"YYYY-MM-DD\"),\n                      startDate: moment(\n                        props.countersParams?.start_date\n                      ).format(\"YYYY-MM-DD\"),\n                    })}\n                    disabled={\n                      props.countersParams.start_date == null ||\n                      props.countersParams.start_date == \"\"\n                        ? true\n                        : false\n                    }\n                    onChange={(date) => {\n                      props.FilterInputChangeValue({\n                        key: \"end_date\",\n                        value: date == null ? \"\" : date,\n                      });\n                    }}\n                  />\n                </Form.Item>\n              </Col>\n\n              <Col span={12}>\n                <Form.Item label=\"Zone Name :\" name=\"zone\">\n                  <Select\n                    showSearch\n                    allowClear\n                    placeholder=\"Select  Zone\"\n                    optionFilterProp=\"children\"\n                    filterOption={(input, option) =>\n                      option.children\n                        .toLowerCase()\n                        .includes(input.toLowerCase())\n                    }\n                    onChange={(value) => {\n                      props.getMiniDivisions({ zone: value });\n                      props.getMiniDivisionsClearData();\n                      props.getMiniClustersClearData();\n                      props.FilterInputChangeValue({\n                        key: \"zone\",\n                        value: value,\n                      });\n                    }}\n                    value={\n                      props.countersParams.zone_id == null\n                        ? \"\"\n                        : props.countersParams?.zone_id\n                    }\n                  >\n                    {props.miniZonesList.map((zone, index) => {\n                      return (\n                        <Option key={index} value={zone.id}>\n                          {zone.name}\n                        </Option>\n                      );\n                    })}\n                  </Select>\n                </Form.Item>\n              </Col>\n\n              <Col span={12}>\n                <Form.Item label=\"Division Name:\" name=\"division\">\n                  <Select\n                    showSearch\n                    allowClear\n                    placeholder=\"Select  Division\"\n                    optionFilterProp=\"division\"\n                    filterOption={(input, option) =>\n                      option.children\n                        .toLowerCase()\n                        .includes(input.toLowerCase())\n                    }\n                    onChange={(value) => {\n                      props.getMiniClusters({ division: value });\n                      props.getMiniClustersClearData();\n                      props.FilterInputChangeValue({\n                        key: \"division\",\n                        value: value,\n                      });\n                    }}\n                    value={\n                      props.countersParams.division_id == null\n                        ? \"\"\n                        : props.countersParams?.division_id\n                    }\n                  >\n                    {props.miniDivisionsList.map((division, index) => {\n                      return (\n                        <Option key={index} value={division.id}>\n                          {division.name}\n                        </Option>\n                      );\n                    })}\n                  </Select>\n                </Form.Item>\n              </Col>\n\n              <Col span={12}>\n                <Form.Item label=\"Cluster Name:\" name=\"cluster\">\n                  <Select\n                    showSearch\n                    allowClear\n                    placeholder=\"Select Cluster\"\n                    optionFilterProp=\"cluster\"\n                    filterOption={(input, option) =>\n                      option.children\n                        .toLowerCase()\n                        .includes(input.toLowerCase())\n                    }\n                    onChange={(value) => {\n                      props.FilterInputChangeValue({\n                        key: \"cluster\",\n                        value: value,\n                      });\n                    }}\n                    value={\n                      props.countersParams.cluster_id == null\n                        ? \"\"\n                        : props.countersParams?.cluster_id\n                    }\n                  >\n                    {props.miniClustersList.map((cluster, index) => {\n                      return (\n                        <Option key={index} value={cluster.id}>\n                          {cluster.name}\n                        </Option>\n                      );\n                    })}\n                  </Select>\n                </Form.Item>\n              </Col>\n\n              <Col span={12}>\n                <Form.Item label=\"Country :\" name=\"country\">\n                  <Select\n                    showSearch\n                    allowClear\n                    placeholder=\"Select Country\"\n                    optionFilterProp=\"children\"\n                    // filterOption={(input, option) =>\n                    //   option.children.toLowerCase().includes(input.toLowerCase())\n                    // }\n                    onChange={(value) => {\n                      props.getMiniStates({ country: value });\n                      props.getMiniStatesClearData();\n                      props.getMiniDistrictClearData();\n                      props.getMiniCityClearData();\n                      props.FilterInputChangeValue({\n                        key: \"country\",\n                        value: value,\n                      });\n                    }}\n                    value={\n                      props.countersParams.country_id == null\n                        ? \"\"\n                        : props.countersParams?.country_id\n                    }\n                  >\n                    {props.miniCountryList.map((country, index) => {\n                      return (\n                        <Option key={index} value={country.id}>\n                          {country.name}\n                        </Option>\n                      );\n                    })}\n                  </Select>\n                </Form.Item>\n              </Col>\n\n              <Col span={12}>\n                <Form.Item label=\"State :\" name=\"state\">\n                  <Select\n                    showSearch\n                    allowClear\n                    filterOption={(input, option) =>\n                      option.children\n                        .toLowerCase()\n                        .includes(input.toLowerCase())\n                    }\n                    placeholder=\"Select State\"\n                    optionFilterProp=\"state\"\n                    onChange={(value) => {\n                      props.getMiniDistrict({ state: value });\n                      props.getMiniDistrictClearData();\n                      props.getMiniCityClearData();\n                      props.FilterInputChangeValue({\n                        key: \"state\",\n                        value: value,\n                      });\n                    }}\n                    value={\n                      props.countersParams.state_id == null\n                        ? \"\"\n                        : props.countersParams?.state_id\n                    }\n                  >\n                    {props.miniStatesList.map((state, index) => {\n                      return (\n                        <Option key={index} value={state.id}>\n                          {state.name}\n                        </Option>\n                      );\n                    })}\n                  </Select>\n                </Form.Item>\n              </Col>\n\n              <Col span={12}>\n                <Form.Item label=\"District :\" name=\"district\">\n                  <Select\n                    showSearch\n                    allowClear\n                    filterOption={(input, option) =>\n                      option.children\n                        .toLowerCase()\n                        .includes(input.toLowerCase())\n                    }\n                    placeholder=\"Select District\"\n                    optionFilterProp=\"district\"\n                    onChange={(value) => {\n                      props.getMiniCity({ district: value });\n                      props.getMiniCityClearData();\n                      props.FilterInputChangeValue({\n                        key: \"district\",\n                        value: value,\n                      });\n                    }}\n                    value={\n                      props.countersParams.district_id == null\n                        ? \"\"\n                        : props.countersParams?.district_id\n                    }\n                  >\n                    {props.miniDistrictList.map((district, index) => {\n                      return (\n                        <Option key={index} value={district.id}>\n                          {district.name}\n                        </Option>\n                      );\n                    })}\n                  </Select>\n                </Form.Item>\n              </Col>\n\n              <Col span={12}>\n                <Form.Item label=\"City :\" name=\"city\">\n                  <Select\n                    showSearch\n                    allowClear\n                    filterOption={(input, option) =>\n                      option.children\n                        .toLowerCase()\n                        .includes(input.toLowerCase())\n                    }\n                    placeholder=\"Select City\"\n                    optionFilterProp=\"city\"\n                    onChange={(value) => {\n                      props.getMiniArea({ city: value });\n                      props.getMiniAreaClearData();\n                      props.FilterInputChangeValue({\n                        key: \"city\",\n                        value: value,\n                      });\n                    }}\n                    value={\n                      props.countersParams.city_id == null\n                        ? \"\"\n                        : props.countersParams?.city_id\n                    }\n                  >\n                    {props.miniCityList.map((city, index) => {\n                      return (\n                        <Option key={index} value={city.id}>\n                          {city.name}\n                        </Option>\n                      );\n                    })}\n                  </Select>\n                </Form.Item>\n              </Col>\n\n              <Col span={12}>\n                <Form.Item label=\"Area :\" name=\"area\">\n                  <Select\n                    showSearch\n                    allowClear\n                    filterOption={(input, option) =>\n                      option.children\n                        .toLowerCase()\n                        .includes(input.toLowerCase())\n                    }\n                    placeholder=\"Select Area\"\n                    optionFilterProp=\"area\"\n                    onChange={(value) => {\n                      props.FilterInputChangeValue({\n                        key: \"area\",\n                        value: value,\n                      });\n                    }}\n                    value={\n                      props.countersParams.area_id == null\n                        ? \"\"\n                        : props.countersParams?.area_id\n                    }\n                  >\n                    {props.miniAreaList.map((area, index) => {\n                      return (\n                        <Option key={index} value={area.id}>\n                          {area.name}\n                        </Option>\n                      );\n                    })}\n                  </Select>\n                </Form.Item>\n              </Col>\n            </Row>\n            <Row gutter={[12, 12]}>\n              <Col md={12}>\n                <Button\n                  block\n                  type=\"secondary\"\n                  className=\"hp-submit-btn hp-mt-10\"\n                  onClick={() => {\n                    clearFilter();\n                  }}\n                  htmlType=\"button\"\n                >\n                  Clear\n                </Button>\n              </Col>\n              <Col md={12}>\n                <Button\n                  block\n                  type=\"primary\"\n                  className=\"hp-submit-btn hp-mt-10\"\n                  onClick={() => {\n                    form.submit();\n                  }}\n                >\n                  Apply\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n        </Drawer>\n      </Col>\n    </Row>\n  );\n};\n\nfunction mapStateToProps({ counters, mini }) {\n  return {\n    drawer: counters.drawer,\n    countersParams: counters.countersParams,\n    miniStatesList: mini.miniStatesList,\n    miniDistrictList: mini.miniDistrictList,\n    miniCityList: mini.miniCityList,\n    miniCountryList: mini.miniCountryList,\n    miniClustersList: mini.miniClustersList,\n    miniDivisionsList: mini.miniDivisionsList,\n    miniZonesList: mini.miniZonesList,\n    miniAreaList: mini.miniAreaList,\n  };\n}\n\nexport default connect(mapStateToProps, {\n  isDrawerVisible,\n  SetCountersParams,\n  FilterInputChangeValue,\n  getCounters,\n  getMiniStates,\n  getMiniDistrict,\n  getMiniCity,\n  getMinicountry,\n  getMiniClusters,\n  getMiniDivisions,\n  getMiniZones,\n  getMiniArea,\n\n  getMiniStatesClearData,\n  getMiniDistrictClearData,\n  getMiniCityClearData,\n  getMinicountryClearData,\n  getMiniZonesClearData,\n  getMiniClustersClearData,\n  getMiniDivisionsClearData,\n  getMiniAreaClearData,\n})(filter);\n","import React, { useEffect, useState } from \"react\";\n\nimport {\n  Row,\n  Col,\n  Input,\n  Card,\n  Pagination,\n  Button,\n  Spin,\n  Popconfirm,\n  Tag,\n} from \"antd\";\nimport { Table, Space } from \"antd\";\nimport { RiErrorWarningLine } from \"react-icons/ri\";\nimport { FilterOutlined, UploadOutlined } from \"@ant-design/icons\";\nimport { Search } from \"react-iconly\";\nimport { connect } from \"react-redux\";\n\nimport MasterPageTitle from \"../../../../layout/components/content/master-page-title\";\nimport AddCounter from \"./addCounter\";\nimport { isMobile } from \"react-device-detect\";\n\nimport {\n  getCounters,\n  counterEdit,\n  counterDelete,\n  isModelVisible,\n  SetCountersParams,\n  isDrawerVisible,\n} from \"../../../../store/Masters/Counters/counterSlice\";\n\nimport {\n  getMiniClusters,\n  getMiniStates,\n  getMiniDistrict,\n  getMiniDivisions,\n  getMiniZones,\n  getMiniCity,\n  getMiniArea,\n} from \"../../../../store/mini/miniSlice\";\nimport Filter from \"./Filters/Filter\";\n\nfunction Counter(props) {\n  const { Search } = Input;\n  const columnClass =\n  \"hp-p1-body hp-text-color-black-50 hp-text-color-dark-0 hp-font-weight-500 \";\n  useEffect(() => {\n    props.getCounters({ ...props.countersParams, page: 1 });\n    props.getMiniZones();\n  }, []);\n\n  const columns = [\n    {\n      title: \"S.No\",\n      dataIndex: \"index\",\n      width: \"5%\",\n      // sorter: (a, b) => a.index - b.index,\n    },\n    {\n      title: \"Code\",\n      dataIndex: \"code\",\n      // sorter: (a, b) => a.name.length - b.name.length,\n      filterSearch: true,\n      width: \"20%\",\n    },\n    {\n      title: \"Counter Name\",\n      // dataIndex: \"name\",\n      render: (row) => <span className={columnClass}>{row.name}</span>,\n      filterMode: \"tree\",\n      filterSearch: true,\n      // sorter: (a, b) => a.name.length - b.name.length,\n      width: \"20%\",\n    },\n    {\n      title: \"Status\",\n      width: \"20%\",\n      render: (row) => (\n        <Space size=\"middle\">\n          {row.is_active ? (\n            <Tag color=\"green\">Active</Tag>\n          ) : (\n            <Tag color=\"red\">Inactive</Tag>\n          )}\n        </Space>\n      ),\n    },\n    {\n      title: \"Zone\",\n      render: (row) => <span className={columnClass}>{row.zone?.name}</span>,\n      filterMode: \"tree\",\n      filterSearch: true,\n      // sorter: (a, b) => a.name.length - b.name.length,\n      width: \"20%\",\n    },\n    {\n      title: \"Division\",\n      render: (row) => <span className={columnClass}>{row.division?.name}</span>,\n      filterMode: \"tree\",\n      filterSearch: true,\n      // sorter: (a, b) => a.name.length - b.name.length,\n      width: \"20%\",\n    },\n    {\n      title: \"Cluster\",\n      render: (row) => <span className={columnClass}>{row.cluster?.name}</span>,\n      // sorter: (a, b) => a.name.length - b.name.length,\n      filterMode: \"tree\",\n      filterSearch: true,\n      width: \"20%\",\n    },\n    {\n      title: \"Counter Type\",\n      render: (row) => <span className={columnClass}>{row.type_name}</span>,\n      filterMode: \"tree\",\n      filterSearch: true,\n      width: \"20%\",\n    },\n\n    {\n      title: \"Actions\",\n      key: \"action\",\n      width: \"10%\",\n      render: (row, record) => (\n        <Space size=\"middle\">\n          {props.userAccessList?.indexOf(\"Masters.change_counter\") !== -1 && (\n            <i\n              className=\"ri-edit-box-line hp-mr-2 \"\n              style={{ cursor: \"pointer\", color: \"#fc6f03\" }}\n              onClick={() => {\n                props.counterEdit(row);\n                props.getMiniDivisions({ zone: row.zone.id });\n                props.getMiniClusters({ division: row.division.id });\n                props.getMiniDistrict({ state: row.state.id });\n                props.getMiniCity({ district: row.district.id });\n                props.getMiniArea({ city: row.city.id });\n                props.isModelVisible(true);\n              }}\n            ></i>\n          )}\n\n          {props.userAccessList?.indexOf(\"Masters.delete_counter\") !== -1 && (\n            <Popconfirm\n              placement=\"topRight\"\n              title=\"Are you sure to delete this Record?\"\n              onConfirm={() => props.counterDelete(record.id)}\n              okText=\"Yes\"\n              cancelText=\"No\"\n              className=\"hp-ml-8\"\n              icon={\n                <RiErrorWarningLine className=\"remix-icon hp-text-color-primary-1\" />\n              }\n            >\n              <i\n                className=\"ri-delete-bin-2-line \"\n                style={{ cursor: \"pointer\", color: \"#ff0000\" }}\n              ></i>\n            </Popconfirm>\n          )}\n        </Space>\n      ),\n    },\n  ];\n\n  const data = props.counterslist.map((row, key) => ({\n    ...row,\n    index:\n      (props.countersParams.page - 1) * props.countersParams.page_size +\n      key +\n      1,\n    zonename: row.zone.name,\n    clustername: row.cluster.name,\n    divisionname: row.division.name,\n    typeIndex: row.type_name,\n  }));\n\n  function onPageChange(page, pageSize) {\n    props.SetCountersParams({\n      ...props.countersParams,\n      page_size: pageSize,\n      page: page == 0 ? 1 : page,\n    });\n    props.getCounters({\n      ...props.countersParams,\n      page_size: pageSize,\n      page: page == 0 ? 1 : page,\n    });\n  }\n\n  function onSearch(val) {\n    props.SetCountersParams({ ...props.countersParams, search: val });\n    props.getCounters({ ...props.countersParams, search: val });\n  }\n  function showTotal(total) {\n    return \"Total \" + total + \" items\";\n  }\n  return (\n    <Row gutter={[32, 32]} className=\"hp-mt-32\">\n      <MasterPageTitle\n        pageTitle=\"Counter Master\"\n        addModelTile={\n          props.userAccessList?.indexOf(\"Masters.add_counter\") !== -1 &&\n          \"Add Counter\"\n        }\n        goBack={true}\n        setIsModalVisible={props.isModelVisible}\n        isModalVisible={props.model}\n      />\n\n      <Col span={24}>\n        <Card>\n          <Row className=\"hp-mb-12\" gutter={[12, 12]}>\n            <Col span={24} xs={24} sm={24} md={12} lg={12} xl={12} xxl={12}>\n              <Search\n                placeholder=\"Search...\"\n                allowClear\n                onChange={(e) => {\n                  if (e.target.value == \"\") {\n                    props.getCounters({\n                      ...props.countersParams,\n                      page: 1,\n                      search: \"\",\n                    });\n                    props.SetCountersParams({\n                      ...props.countersParams,\n                      page: 1,\n                      search: \"\",\n                    });\n                  }\n                }}\n                onSearch={(value) => {\n                  onSearch(value);\n                }}\n              />\n            </Col>\n            <Col span={24} xs={11} sm={11} md={4} lg={4} xl={4} xxl={4}>\n              <Button\n                onClick={() => {\n                  props.isDrawerVisible(true);\n                }}\n                className=\"hp-w-100 hp-p-10\"\n                icon={<FilterOutlined className=\"hp-mr-10\" />}\n              >\n                {!isMobile && \"Filter\"}\n              </Button>\n            </Col>\n\n            {props.userAccessList?.indexOf(\"Masters.export_counter\") !== -1 && (\n              <Col span={24} xs={11} sm={11} md={4} lg={4} xl={4} xxl={4}>\n                <Button\n                  onClick={() => {\n                    exportData();\n                  }}\n                  className=\"hp-w-100 hp-p-10\"\n                  icon={<UploadOutlined className=\"hp-mr-10\" />}\n                >\n                  {!isMobile && \"Export\"}\n                </Button>\n              </Col>\n            )}\n          </Row>\n\n          <Row>\n            <Col span={24}>\n              <Spin tip=\"Loading...\" spinning={props.loading} delay={500}>\n                <Table\n                  columns={columns}\n                  dataSource={data}\n                  scroll={{ x: 500 }}\n                  pagination={false}\n                  size=\"middle\"\n                />\n              </Spin>\n            </Col>\n            <Col span={24}>\n              <Pagination\n                size=\"small\"\n                current={props.countersParams?.page}\n                pageSize={props.countersParams?.page_size}\n                total={props.listCount}\n                showTotal={showTotal}\n                showSizeChanger\n                onChange={onPageChange}\n                className=\"hp-mb-12 hp-mt-24 hp-float-right\"\n              />\n            </Col>\n          </Row>\n        </Card>\n      </Col>\n      <AddCounter />\n      <Filter />\n    </Row>\n  );\n}\n\nfunction mapPersonToProps({ counters, system }) {\n  return {\n    counterslist: counters.counterslist,\n    noofpages: counters.noofpages,\n    listCount: counters.listCount,\n    countersParams: counters.countersParams,\n    loading: counters.loading,\n    userAccessList: system.userAccessList,\n  };\n}\n\nexport default connect(mapPersonToProps, {\n  getCounters,\n  counterEdit,\n  counterDelete,\n  isModelVisible,\n  getMiniStates,\n  getMiniDistrict,\n  getMiniDivisions,\n  getMiniZones,\n  getMiniClusters,\n  SetCountersParams,\n  getMiniCity,\n  getMiniArea,\n  isDrawerVisible,\n})(Counter);\n"],"sourceRoot":""}